# name: CD

# on:
#   push:
#     branches: [ "main" ]

# env:
#   IMAGE_NAME: ghcr.io/${{ github.repository }} # ghcr.io/owner/repo
#   IMAGE_TAG: ${{ github.sha }}

# jobs:
#   push-image:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Build and Push
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#             ${{ env.IMAGE_NAME }}:latest

name: CD (POC deploy to server)

on:
  push:
    branches: ["main"]

env:
  IMAGE_NAME: ci-cd-poc
  CONTAINER_NAME: ci-cd-poc
  HOST_PORT: ${{ secrets.APP_PORT }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (load into runner)
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:latest

      - name: Save image as tar
        run: docker save ${{ env.IMAGE_NAME }}:latest -o app-image.tar

      - name: Prep transfer (folder + permissive read)
        run: |
          mkdir -p transfer
          mv app-image.tar transfer/
          chmod -R a+r transfer

      - name: Upload artifact (for debugging, optional)
        uses: actions/upload-artifact@v4
        with:
          name: app-image-tar
          path: transfer/app-image.tar
          retention-days: 3

      - name: Check TCP reachability (SSH)
        run: |
          set -e
          H=${{ secrets.SSH_HOST }}
          P=${{ secrets.SSH_PORT || 22 }}
          echo "Probing $H:$P ..."
          if timeout 5 bash -lc "cat < /dev/null > /dev/tcp/$H/$P"; then
            echo "OK: Port open"
          else
            echo "FAIL: Cannot reach $H:$P from GitHub runner"
            exit 1
          fi

      - name: Copy image tar to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "transfer/*"
          target: "~/ci-cd-poc/"
          overwrite: true
          timeout: 120s
          command_timeout: 20m

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT}}
          script: |
            set -euo pipefail
            cd ~/ci-cd-poc

            echo "[1/5] Loading image"
            docker load -i app-image.tar

            echo "[2/5] Stopping old container if running"
            docker rm -f ${{ env.CONTAINER_NAME }} || true

            echo "[3/5] Starting new container"
            docker run -d --restart=always \
              --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.HOST_PORT }}:3000 \
              ${{ env.IMAGE_NAME }}:latest

            echo "[4/5] Health check (simple)"
            sleep 2
            docker ps --filter "name=${{ env.CONTAINER_NAME }}"

            echo "[5/5] Cleanup old images"
            docker image prune -f || true
            echo "Deployment Complete!!!"
